//------------------------------------------------------------------------------
//                         Secretaria de Finanzas
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using PAG_DA;
using PAG_DTO;
using PAG_INTERFACES;
using PAG_MAPPERS;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Linq;
using System.ServiceModel;
using System.Transactions;


namespace PAG_WCF
{
    
    
    public class TPR_TIPOS_PROGRAMACION_RDN
    {

        public List<TPR_TIPOS_PROGRAMACION_DTO> TPR_TIPOS_PROGRAMACION_listado()
        {
            // TODO: Desarrolle su Codigo Aqui.
            List<TPR_TIPOS_PROGRAMACION_DTO> ltTPR_TIPOS_PROGRAMACION = new List<TPR_TIPOS_PROGRAMACION_DTO>();
            //try
            //{
                using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
                {
                    IQueryable<TPR_TIPOS_PROGRAMACION> query;
                    query = from rec in context.TPR_TIPOS_PROGRAMACION
                            orderby rec.INSTITUCION, rec.GA, rec.TIPO_PROGRAMACION
                            select rec;
                    foreach (var item in query)
                    {
                        var prec = item.ToDto();
                        // Descripción de institución
                        List<INSTITUCIONES> lov_ins = context.INSTITUCIONES.Where(col => col.INSTITUCION == prec.INSTITUCION).ToList();
                        if (lov_ins.Count > 0) { prec.DESC_INSTITUCION = lov_ins.FirstOrDefault().DESC_INSTITUCION; }
                        // Descripción de GA
                        var entityGA = new GERENCIAS_ADMINISTRATIVAS();
                        entityGA.GESTION = 2016; 
                        entityGA.INSTITUCION = prec.INSTITUCION;
                        entityGA.GA = prec.GA;
                        var filterGA = new GERENCIAS_ADMINISTRATIVAS_FILTER();
                        var delegatesGA = filterGA.GetExpression(entityGA);
                        List<GERENCIAS_ADMINISTRATIVAS> lov_ga = context.GERENCIAS_ADMINISTRATIVAS.Where(delegatesGA).ToList();
                        if (lov_ga.Count > 0) { prec.DESC_GA = lov_ga.FirstOrDefault().DESC_GA; }
                        //
                        ltTPR_TIPOS_PROGRAMACION.Add(prec);
                    }
                }
            //}
            //catch (Exception Ex)
            //{
            //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), Ex.InnerException.InnerException.Message);
            //}
            return ltTPR_TIPOS_PROGRAMACION;
        }

        public List<TPR_TIPOS_PROGRAMACION_DTO> TPR_TIPOS_PROGRAMACION_filtrado(TPR_TIPOS_PROGRAMACION_DTO precDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            var seguridad = ((SAS_DTO.AUX_SEGURIDAD_DTO)System.Web.HttpContext.Current.Session["Permisos"]);
            var gestion = short.Parse(seguridad.detalleGrupo.Find(col => col.NIVEL == System.Configuration.ConfigurationManager.AppSettings["nivelGrupoDetalle_GESTION"]).VALOR.ToString());
            List<TPR_TIPOS_PROGRAMACION_DTO> ltTPR_TIPOS_PROGRAMACION = new List<TPR_TIPOS_PROGRAMACION_DTO>();
            //try
            //{
                using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
                {
                    var entity = precDto.ToEntity();
                    var filters = new TPR_TIPOS_PROGRAMACION_FILTER();
                    var delegates = filters.GetExpression(entity);
                    //Aplicar pFilters Dinamico
                    if (!filters.hasFilters) { return ltTPR_TIPOS_PROGRAMACION; };
                    var filteredCollection = context.TPR_TIPOS_PROGRAMACION.OrderBy(x => x.TIPO_PROGRAMACION).Where(delegates).ToList();
                    //Transformar pFilter Dinamico
                    foreach (var item in filteredCollection) {
                        var prec = item.ToDto();
                        // Descripción de institución
                        List<INSTITUCIONES> lov_ins = context.INSTITUCIONES.Where(col => col.INSTITUCION == prec.INSTITUCION).ToList();
                        if (lov_ins.Count > 0) { prec.DESC_INSTITUCION = lov_ins.FirstOrDefault().DESC_INSTITUCION; }
                        // Descripción de GA
                        var entityGA = new GERENCIAS_ADMINISTRATIVAS();
                        entityGA.GESTION = gestion; 
                        entityGA.INSTITUCION = prec.INSTITUCION;
                        entityGA.GA = prec.GA;
                        var filterGA = new GERENCIAS_ADMINISTRATIVAS_FILTER();
                        var delegatesGA = filterGA.GetExpression(entityGA);
                        List<GERENCIAS_ADMINISTRATIVAS> lov_ga = context.GERENCIAS_ADMINISTRATIVAS.Where(delegatesGA).ToList();
                        if (lov_ga.Count > 0) { prec.DESC_GA = lov_ga.FirstOrDefault().DESC_GA; }

                        ltTPR_TIPOS_PROGRAMACION.Add(prec);
                    }
                }
            //}
            //catch (Exception Ex)
            //{
            //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), Ex.InnerException.InnerException.Message);
            //}
            return ltTPR_TIPOS_PROGRAMACION;
        }

        public TPR_TIPOS_PROGRAMACION_DTO TPR_TIPOS_PROGRAMACION_inserta(TPR_TIPOS_PROGRAMACION_DTO precDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
            {
                precDto.API_ESTADO = "INICIAL";
                precDto.API_TRANSACCION = "CREAR";
                precDto.USU_CRE = PAG_ServicesUtil.usuarioPAG;
                //Insert NewRow Client
                TPR_TIPOS_PROGRAMACION entity = new TPR_TIPOS_PROGRAMACION();
                //try
                //{
                    //Begin SavePoint
                    using (TransactionScope SavePoint = new TransactionScope())
                    {
                        entity = precDto.ToEntity();
                        context.TPR_TIPOS_PROGRAMACION.Add(entity);
                        context.SaveChanges();
                        SavePoint.Complete(); //Commit SavePoint
                    }//End SavePoint
                //}
                //catch (Exception ex)
                //{
                //    if (PAG_ServicesUtil.EsErrorORA(ex))
                //    { throw new FaultException(PAG_ServicesUtil.ObtDescExcepcion(ex, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodExcepcion(ex))); };
                //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), ex.InnerException.Message);
                //}
                //Retuning NewRow DataBase
                precDto.TIPO_PROGRAMACION = entity.TIPO_PROGRAMACION;
                //Retuning NewAudit DataBase
                precDto.API_ESTADO = entity.API_ESTADO;
                precDto.API_TRANSACCION = entity.API_TRANSACCION;
                precDto.USU_CRE = entity.USU_CRE;
                precDto.FEC_CRE = entity.FEC_CRE;
                precDto.USU_MOD = null;
                precDto.FEC_MOD = null;
            }
            //
            return precDto;
        }

    public TPR_TIPOS_PROGRAMACION_DTO TPR_TIPOS_PROGRAMACION_actualiza(TPR_TIPOS_PROGRAMACION_DTO precDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
            {
                //Validate RDN
                var entity = context.TPR_TIPOS_PROGRAMACION.Find(precDto.INSTITUCION, precDto.TIPO_PROGRAMACION);
                if (entity == null) { throw new FaultException(PAG_ServicesUtil.ObtDescWFCExcepcion("PAG", 2, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodWFCExcepcion("PAG", 2))); } /*"Registro NO Encontrado."*/
                List<API_TRANSICIONES> transicion = context.API_TRANSICIONES.Where(col => col.TABLA == "TPR_TIPOS_PROGRAMACION" && col.ESTADO_INICIAL == entity.API_ESTADO && col.TRANSACCION == precDto.API_TRANSACCION).ToList();
                if (transicion.Count == 0) { throw new FaultException(PAG_ServicesUtil.ObtDescWFCExcepcion("PAG", 4, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodWFCExcepcion("PAG", 4))); } /*"Transición NO Definida en Flujo del Registro."*/
                //Assign Data NewRow
                var pEntity = precDto.ToEntity();
                entity.DESC_TIPO_PROGRAMACION = pEntity.DESC_TIPO_PROGRAMACION;
                entity.ESPECIAL = pEntity.ESPECIAL;
                entity.API_TRANSACCION = pEntity.API_TRANSACCION;
                entity.USU_MOD = PAG_ServicesUtil.usuarioPAG;
                //Update NewRow Cliente
                //try
                //{
                    //Begin SavePoint
                    using (TransactionScope SavePoint = new TransactionScope())
                    {
                        context.TPR_TIPOS_PROGRAMACION.Attach(entity);
                        var entry = context.Entry(entity);
                        entry.State = EntityState.Modified;
                        context.SaveChanges();
                        context.Entry(entity).Reload();
                        SavePoint.Complete(); //Commit SavePoint
                    }//End SavePoint
                //}
                //catch (Exception ex)
                //{
                //    if (PAG_ServicesUtil.EsErrorORA(ex))
                //    { throw new FaultException(PAG_ServicesUtil.ObtDescExcepcion(ex, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodExcepcion(ex))); };
                //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), ex.InnerException.Message);
                //}
                //Retuning NewAudit DataBase
                precDto.API_ESTADO = entity.API_ESTADO;
                precDto.API_TRANSACCION = entity.API_TRANSACCION;
                precDto.USU_MOD = entity.USU_MOD;
                precDto.FEC_MOD = entity.FEC_MOD;
            }
            return precDto;
        }

        public TPR_TIPOS_PROGRAMACION_DTO TPR_TIPOS_PROGRAMACION_elimina(params object[] pkeysDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            throw new FaultException("PAG-00001 Implementada en Base de Datos.", new FaultCode("PAG-00001"));
        }

        public List<TPR_TIPOS_PROGRAMACION_DTO> TPR_TIPOS_PROGRAMACION_filtradoDocto(DTP_TIPOS_PROGRA_DET_DTO precTiposProgram)
        {
            // Recupera todos los registros de consolidado que no se encuentren cargados en el documento
            List<TPR_TIPOS_PROGRAMACION_DTO> listaTipos = new List<TPR_TIPOS_PROGRAMACION_DTO>();
            var existeDocumento = false;
            //
            using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
            {
                TPR_TIPOS_PROGRAMACION_DTO registroFiltro = new TPR_TIPOS_PROGRAMACION_DTO
                {
                    INSTITUCION = precTiposProgram.INSTITUCION,
                    GA = precTiposProgram.GA
                };
                registroFiltro.API_ESTADO = "APROBADO";// solo registros aprobados
                var entity = registroFiltro.ToEntity();
                var filters = new TPR_TIPOS_PROGRAMACION_FILTER();
                var delegates = filters.GetExpression(entity);
                var filteredCollection = context.TPR_TIPOS_PROGRAMACION.Where(delegates).ToList();
                //
                //se buscan los registros detalles del documento
                if (precTiposProgram.GESTION > 0 && precTiposProgram.INSTITUCION > 0 && precTiposProgram.GA > 0 && precTiposProgram.NRO_DOCUMENTO > 0)
                {
                    existeDocumento = true;
                    var entityDet = precTiposProgram.ToEntity();
                    var filtersDet = new DTP_TIPOS_PROGRA_DET_FILTER();
                    var delegatesDet = filtersDet.GetExpression(entityDet);
                    var filteredCollectionDet = context.DTP_TIPOS_PROGRA_DET.Where(delegatesDet).ToList();

                    foreach (var item in filteredCollection)
                    {
                        // se filtra por la llave primaria del consolidado
                        var detFound = filteredCollectionDet.Find(det => det.INSTITUCION_PROG == item.INSTITUCION &&
                                                                  det.GA_PROG == item.GA &&
                                                                  det.TIPO_PROGRAMACION == item.TIPO_PROGRAMACION);
                        if (detFound == null)
                        {
                            var prec = item.ToDto();
                            // Descripción de institución
                            List<INSTITUCIONES> lov_ins = context.INSTITUCIONES.Where(col => col.INSTITUCION == prec.INSTITUCION).ToList();
                            if (lov_ins.Count > 0) { prec.DESC_INSTITUCION = lov_ins.FirstOrDefault().DESC_INSTITUCION; }
                            // Descripción de GA
                            var entityGA = new GERENCIAS_ADMINISTRATIVAS();
                            entityGA.GESTION = precTiposProgram.GESTION;
                            entityGA.INSTITUCION = prec.INSTITUCION;
                            entityGA.GA = prec.GA;
                            var filterGA = new GERENCIAS_ADMINISTRATIVAS_FILTER();
                            var delegatesGA = filterGA.GetExpression(entityGA);
                            List<GERENCIAS_ADMINISTRATIVAS> lov_ga = context.GERENCIAS_ADMINISTRATIVAS.Where(delegatesGA).ToList();
                            if (lov_ga.Count > 0) { prec.DESC_GA = lov_ga.FirstOrDefault().DESC_GA; }
                            listaTipos.Add(prec);
                        }
                    }

                }// existe documento
                 // Si no se comparó con ningún documento, se carga la lista completa
                if (!existeDocumento)
                {
                    foreach (var item in filteredCollection)
                    {
                        var prec = item.ToDto();
                        // Descripción de institución
                        List<INSTITUCIONES> lov_ins = context.INSTITUCIONES.Where(col => col.INSTITUCION == prec.INSTITUCION).ToList();
                        if (lov_ins.Count > 0) { prec.DESC_INSTITUCION = lov_ins.FirstOrDefault().DESC_INSTITUCION; }
                        // Descripción de GA
                        var entityGA = new GERENCIAS_ADMINISTRATIVAS();
                        entityGA.GESTION = precTiposProgram.GESTION; 
                        entityGA.INSTITUCION = prec.INSTITUCION;
                        entityGA.GA = prec.GA;
                        var filterGA = new GERENCIAS_ADMINISTRATIVAS_FILTER();
                        var delegatesGA = filterGA.GetExpression(entityGA);
                        List<GERENCIAS_ADMINISTRATIVAS> lov_ga = context.GERENCIAS_ADMINISTRATIVAS.Where(delegatesGA).ToList();
                        if (lov_ga.Count > 0) { prec.DESC_GA = lov_ga.FirstOrDefault().DESC_GA; }
                        listaTipos.Add(prec);
                    }
                }
            }
            //
            return listaTipos;
        }
    }
}
