//------------------------------------------------------------------------------
//                         Secretaria de Finanzas
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using PAG_DA;
using PAG_DTO;
using PAG_INTERFACES;
using PAG_MAPPERS;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.Linq;
using System.ServiceModel;
using System.Transactions;


namespace PAG_WCF
{
    
    
    public class PRG_LIBRETAS_BOLSON_RDN
    {

        public List<PRG_LIBRETAS_BOLSON_DTO> PRG_LIBRETAS_BOLSON_listado()
        {
            // TODO: Desarrolle su Codigo Aqui.
            List<PRG_LIBRETAS_BOLSON_DTO> ltPRG_LIBRETAS_BOLSON = new List<PRG_LIBRETAS_BOLSON_DTO>();
            //try
            //{
                using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
                {
                    IQueryable<PRG_LIBRETAS_BOLSON> query;
                    query = from rec in context.PRG_LIBRETAS_BOLSON
                            orderby rec.MONEDA, rec.FUENTE
                            select rec;                
                    foreach (var item in query)
                    {
                        var prec = item.ToDto();
                        obtenerDescripciones(ref prec);
                        ltPRG_LIBRETAS_BOLSON.Add(prec);
                    }
                    
                }
            //}
            //catch (Exception Ex)
            //{
            //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), Ex.InnerException.InnerException.Message);
            //}
            return ltPRG_LIBRETAS_BOLSON;
        }

        public List<PRG_LIBRETAS_BOLSON_DTO> PRG_LIBRETAS_BOLSON_filtrado(PRG_LIBRETAS_BOLSON_DTO precDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            List<PRG_LIBRETAS_BOLSON_DTO> ltPRG_LIBRETAS_BOLSON = new List<PRG_LIBRETAS_BOLSON_DTO>();
            //try
            //{
                using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
                {
                    var entity = precDto.ToEntity();
                    var filters = new PRG_LIBRETAS_BOLSON_FILTER();
                    var delegates = filters.GetExpression(entity);
                    //Aplicar pFilters Dinamico
                    if (!filters.hasFilters) { return ltPRG_LIBRETAS_BOLSON; };
                    var filteredCollection = context.PRG_LIBRETAS_BOLSON.OrderBy(x => x.MONEDA).ThenBy(x => x.FUENTE).Where(delegates).ToList();
                    //Transformar pFilter Dinamico
                    foreach (var item in filteredCollection) {
                        var prec = item.ToDto();
                        obtenerDescripciones(ref prec);
                        ltPRG_LIBRETAS_BOLSON.Add(prec);
                    }
                }
            //}
            //catch (Exception Ex)
            //{
            //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), Ex.InnerException.InnerException.Message);
            //}
            return ltPRG_LIBRETAS_BOLSON;
        }

        public PRG_LIBRETAS_BOLSON_DTO PRG_LIBRETAS_BOLSON_inserta(PRG_LIBRETAS_BOLSON_DTO precDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
            {
                precDto.API_ESTADO = "INICIAL";
                precDto.API_TRANSACCION = "CREAR";
                precDto.USU_CRE = PAG_ServicesUtil.usuarioPAG;
                //Insert NewRow Client
                PRG_LIBRETAS_BOLSON entity = new PRG_LIBRETAS_BOLSON();
                //try
                //{
                    //Begin SavePoint
                    using (TransactionScope SavePoint = new TransactionScope())
                    {
                        entity = precDto.ToEntity();
                        context.PRG_LIBRETAS_BOLSON.Add(entity);
                        context.SaveChanges();
                        SavePoint.Complete(); //Commit SavePoint
                    }//End SavePoint
                //}
                //catch (Exception ex)
                //{
                //    if (PAG_ServicesUtil.EsErrorORA(ex))
                //    { throw new FaultException(PAG_ServicesUtil.ObtDescExcepcion(ex, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodExcepcion(ex))); };
                //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), ex.InnerException.Message);
                //}
                //Retuning NewRow DataBase
                precDto.GESTION = entity.GESTION;
                precDto.INSTITUCION = entity.INSTITUCION;
                precDto.GA = entity.GA;
                precDto.BANCO = entity.BANCO;
                precDto.CUENTA = entity.CUENTA;
                precDto.LIBRETA = entity.LIBRETA;
                precDto.FUENTE = entity.FUENTE;
                //Retuning NewAudit DataBase
                precDto.API_ESTADO = entity.API_ESTADO;
                precDto.API_TRANSACCION = entity.API_TRANSACCION;
                precDto.USU_CRE = entity.USU_CRE;
                precDto.FEC_CRE = entity.FEC_CRE;
                precDto.USU_MOD = null;
                precDto.FEC_MOD = null;
            }
            //
            return precDto;
        }

        public PRG_LIBRETAS_BOLSON_DTO PRG_LIBRETAS_BOLSON_actualiza(PRG_LIBRETAS_BOLSON_DTO precDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
            {
                //Validate RDN
                var entity = context.PRG_LIBRETAS_BOLSON.Find(precDto.GESTION, precDto.INSTITUCION, precDto.GA, precDto.BANCO, precDto.CUENTA, precDto.LIBRETA);
                if (entity == null) { throw new FaultException(PAG_ServicesUtil.ObtDescWFCExcepcion("PAG", 2, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodWFCExcepcion("PAG", 2))); } /*"Registro NO Encontrado."*/
                List<API_TRANSICIONES> transicion = context.API_TRANSICIONES.Where(col => col.TABLA == "PRG_LIBRETAS_BOLSON" && col.ESTADO_INICIAL == entity.API_ESTADO && col.TRANSACCION == precDto.API_TRANSACCION).ToList();
                if (transicion.Count == 0) { throw new FaultException(PAG_ServicesUtil.ObtDescWFCExcepcion("PAG", 4, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodWFCExcepcion("PAG", 4))); } /*"Transición NO Definida en Flujo del Registro."*/
                //Assign Data NewRow
                var pEntity = precDto.ToEntity();
                entity.FUENTE = pEntity.FUENTE;
                entity.API_TRANSACCION = pEntity.API_TRANSACCION;
                entity.USU_MOD = PAG_ServicesUtil.usuarioPAG;
                //Update NewRow Cliente
                //try
                //{
                    //Begin SavePoint
                    using (TransactionScope SavePoint = new TransactionScope())
                    {
                        context.PRG_LIBRETAS_BOLSON.Attach(entity);
                        var entry = context.Entry(entity);
                        entry.State = EntityState.Modified;
                        context.SaveChanges();
                        context.Entry(entity).Reload();
                        SavePoint.Complete(); //Commit SavePoint
                    }//End SavePoint
                //}
                //catch (Exception ex)
                //{
                //    if (PAG_ServicesUtil.EsErrorORA(ex))
                //    { throw new FaultException(PAG_ServicesUtil.ObtDescExcepcion(ex, soloMensaje: true), new FaultCode(PAG_ServicesUtil.ObtCodExcepcion(ex))); };
                //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), ex.InnerException.Message);
                //}
                //Retuning NewAudit DataBase
                precDto.API_ESTADO = entity.API_ESTADO;
                precDto.API_TRANSACCION = entity.API_TRANSACCION;
                precDto.USU_MOD = entity.USU_MOD;
                precDto.FEC_MOD = entity.FEC_MOD;
            }
            return precDto;

        }

        public PRG_LIBRETAS_BOLSON_DTO PRG_LIBRETAS_BOLSON_elimina(params object[] pkeysDto)
        {
            // TODO: Desarrolle su Codigo Aqui.
            throw new FaultException("PAG-00001 Implementada en Base de Datos.", new FaultCode("PAG-00001"));
        }
        private void obtenerDescripciones(ref PRG_LIBRETAS_BOLSON_DTO precDto)
        {
            using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
            {
                var prec = precDto;
                // Descripción de Institución
                List<INSTITUCIONES> lovInts = context.INSTITUCIONES.Where(col => col.INSTITUCION == prec.INSTITUCION).ToList();
                if (lovInts.Count > 0){
                    precDto.DESC_INSTITUCION = lovInts.FirstOrDefault().DESC_INSTITUCION;
                }
                //Decripción de GA
                List<GERENCIAS_ADMINISTRATIVAS> lovGa = context.GERENCIAS_ADMINISTRATIVAS.Where(
                                                         col => col.GESTION == prec.GESTION &&
                                                         col.INSTITUCION == prec.INSTITUCION &&
                                                         col.GA == prec.GA).ToList();
                if (lovGa.Count > 0){
                    precDto.DESC_GA = lovGa.FirstOrDefault().DESC_GA;
                }
                // Decripción de fuente
                List<FUENTES_FINANCIAMIENTO> lovFte = context.FUENTES_FINANCIAMIENTO.Where(col => col.FUENTE == prec.FUENTE).ToList();
                if (lovFte.Count > 0) {
                    precDto.DESC_FUENTE = lovFte.FirstOrDefault().DESC_FUENTE;
                }
            }
        }

        public List<PRG_LIBRETAS_BOLSON_DTO> PRG_LIBRETAS_BOLSON_filtradoDocto(DLB_LIB_BOLSON_DET_DTO precDetalle)
        {
            // Recupera todos los registros de consolidado que no se encuentren cargados en el documento
            List<PRG_LIBRETAS_BOLSON_DTO> listaLibretas = new List<PRG_LIBRETAS_BOLSON_DTO>();
            var existeDocumento = false;
            //try
            //{
                using (PAG_Entities context = new PAG_Entities(PAG_Security.DictionaryClaims))
                {
                    PRG_LIBRETAS_BOLSON_DTO registroFiltro = new PRG_LIBRETAS_BOLSON_DTO { GESTION = precDetalle.GESTION, INSTITUCION = precDetalle.INSTITUCION,
                                                                                            GA = precDetalle.GA };
                    registroFiltro.API_ESTADO = "APROBADO";// solo registros aprobados
                    var entity = registroFiltro.ToEntity();
                    var filters = new PRG_LIBRETAS_BOLSON_FILTER();
                    var delegates = filters.GetExpression(entity);
                    var filteredCollection = context.PRG_LIBRETAS_BOLSON.Where(delegates).ToList();
                    //
                    //se buscan los registros detalles del documento
                    if (precDetalle.GESTION > 0 && precDetalle.INSTITUCION > 0 && precDetalle.GA > 0 && precDetalle.NRO_DOCUMENTO > 0)
                    {
                        existeDocumento = true;
                        var entityDet = precDetalle.ToEntity();
                        var filtersDet = new DLB_LIB_BOLSON_DET_FILTER();
                        var delegatesDet = filtersDet.GetExpression(entityDet);
                        var filteredCollectionDet = context.DLB_LIB_BOLSON_DET.Where(delegatesDet).ToList();
                        
                        foreach (var item in filteredCollection)
                        {
                            // se filtra por la llave primaria del consolidado
                            var detFound = filteredCollectionDet.Find(det => det.PAG_INSTITUCION == item.INSTITUCION &&
                                                                      det.PAG_GA == item.GA &&
                                                                      det.LIB_GESTION == item.GESTION &&
                                                                      det.MONEDA == item.MONEDA &&
                                                                      det.FUENTE == item.FUENTE);
                            if (detFound == null)
                            {
                                listaLibretas.Add(item.ToDto());
                            }
                        }
                        
                    }// existe documento
                    // Si no se comparó con ningún documento, se carga la lista completa
                    if (!existeDocumento)
                    {
                        foreach (var item in filteredCollection)
                        {
                            var prec = item.ToDto();
                            obtenerDescripciones(ref prec);
                            listaLibretas.Add(prec);
                        }
                    }
                }
            //}
            //catch (Exception Ex)
            //{
            //    throw new FaultException(PAG_ServicesUtil.ErrorPAGDescDefecto, new FaultCode(PAG_ServicesUtil.ErrorPAGCodDefecto), Ex.InnerException.InnerException.Message);
            //}
            return listaLibretas;
        }

    }
}
